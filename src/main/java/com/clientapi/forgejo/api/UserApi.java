/*
 * Forgejo API.
 * This documentation describes the Forgejo API.
 *
 * The version of the OpenAPI document: 1.20.5+0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.clientapi.forgejo.api;

import com.clientapi.forgejo.invoker.ApiCallback;
import com.clientapi.forgejo.invoker.ApiClient;
import com.clientapi.forgejo.invoker.ApiException;
import com.clientapi.forgejo.invoker.ApiResponse;
import com.clientapi.forgejo.invoker.Configuration;
import com.clientapi.forgejo.invoker.Pair;
import com.clientapi.forgejo.invoker.ProgressRequestBody;
import com.clientapi.forgejo.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.clientapi.forgejo.model.AccessToken;
import com.clientapi.forgejo.model.Activity;
import com.clientapi.forgejo.model.BlockedUser;
import com.clientapi.forgejo.model.CreateAccessTokenOption;
import com.clientapi.forgejo.model.CreateEmailOption;
import com.clientapi.forgejo.model.CreateGPGKeyOption;
import com.clientapi.forgejo.model.CreateHookOption;
import com.clientapi.forgejo.model.CreateKeyOption;
import com.clientapi.forgejo.model.CreateOAuth2ApplicationOptions;
import com.clientapi.forgejo.model.CreateRepoOption;
import com.clientapi.forgejo.model.DeleteEmailOption;
import com.clientapi.forgejo.model.EditHookOption;
import com.clientapi.forgejo.model.Email;
import com.clientapi.forgejo.model.GPGKey;
import com.clientapi.forgejo.model.Hook;
import java.time.LocalDate;
import com.clientapi.forgejo.model.OAuth2Application;
import java.time.OffsetDateTime;
import com.clientapi.forgejo.model.PublicKey;
import com.clientapi.forgejo.model.Repository;
import com.clientapi.forgejo.model.StopWatch;
import com.clientapi.forgejo.model.Team;
import com.clientapi.forgejo.model.TrackedTime;
import com.clientapi.forgejo.model.User;
import com.clientapi.forgejo.model.UserHeatmapData;
import com.clientapi.forgejo.model.UserSearch200Response;
import com.clientapi.forgejo.model.UserSettings;
import com.clientapi.forgejo.model.UserSettingsOptions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCurrentUserRepo
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 409 </td><td> The repository with the same name already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createCurrentUserRepoCall(CreateRepoOption body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user/repos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCurrentUserRepoValidateBeforeCall(CreateRepoOption body, final ApiCallback _callback) throws ApiException {
        return createCurrentUserRepoCall(body, _callback);

    }

    /**
     * Create a repository
     * 
     * @param body  (optional)
     * @return Repository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 409 </td><td> The repository with the same name already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public Repository createCurrentUserRepo(CreateRepoOption body) throws ApiException {
        ApiResponse<Repository> localVarResp = createCurrentUserRepoWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Create a repository
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 409 </td><td> The repository with the same name already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Repository> createCurrentUserRepoWithHttpInfo(CreateRepoOption body) throws ApiException {
        okhttp3.Call localVarCall = createCurrentUserRepoValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a repository (asynchronously)
     * 
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Repository </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 409 </td><td> The repository with the same name already exists. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createCurrentUserRepoAsync(CreateRepoOption body, final ApiCallback<Repository> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCurrentUserRepoValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserSettings
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserSettings </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserSettingsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserSettingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getUserSettingsCall(_callback);

    }

    /**
     * Get user settings
     * 
     * @return List&lt;UserSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserSettings </td><td>  -  </td></tr>
     </table>
     */
    public List<UserSettings> getUserSettings() throws ApiException {
        ApiResponse<List<UserSettings>> localVarResp = getUserSettingsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get user settings
     * 
     * @return ApiResponse&lt;List&lt;UserSettings&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserSettings </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserSettings>> getUserSettingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUserSettingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<UserSettings>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user settings (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserSettings </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserSettingsAsync(final ApiCallback<List<UserSettings>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserSettingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<UserSettings>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVerificationToken
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIString is a string response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVerificationTokenCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/gpg_key_token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVerificationTokenValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getVerificationTokenCall(_callback);

    }

    /**
     * Get a Token to verify
     * 
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIString is a string response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public String getVerificationToken() throws ApiException {
        ApiResponse<String> localVarResp = getVerificationTokenWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get a Token to verify
     * 
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIString is a string response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getVerificationTokenWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getVerificationTokenValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Token to verify (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> APIString is a string response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVerificationTokenAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVerificationTokenValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUserSettings
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserSettings </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserSettingsCall(UserSettingsOptions body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserSettingsValidateBeforeCall(UserSettingsOptions body, final ApiCallback _callback) throws ApiException {
        return updateUserSettingsCall(body, _callback);

    }

    /**
     * Update user settings
     * 
     * @param body  (optional)
     * @return List&lt;UserSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserSettings </td><td>  -  </td></tr>
     </table>
     */
    public List<UserSettings> updateUserSettings(UserSettingsOptions body) throws ApiException {
        ApiResponse<List<UserSettings>> localVarResp = updateUserSettingsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Update user settings
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;List&lt;UserSettings&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserSettings </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserSettings>> updateUserSettingsWithHttpInfo(UserSettingsOptions body) throws ApiException {
        okhttp3.Call localVarCall = updateUserSettingsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<List<UserSettings>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update user settings (asynchronously)
     * 
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserSettings </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserSettingsAsync(UserSettingsOptions body, final ApiCallback<List<UserSettings>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserSettingsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<List<UserSettings>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userAddEmail
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> EmailList </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call userAddEmailCall(CreateEmailOption body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user/emails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userAddEmailValidateBeforeCall(CreateEmailOption body, final ApiCallback _callback) throws ApiException {
        return userAddEmailCall(body, _callback);

    }

    /**
     * Add email addresses
     * 
     * @param body  (optional)
     * @return List&lt;Email&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> EmailList </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public List<Email> userAddEmail(CreateEmailOption body) throws ApiException {
        ApiResponse<List<Email>> localVarResp = userAddEmailWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Add email addresses
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;List&lt;Email&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> EmailList </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Email>> userAddEmailWithHttpInfo(CreateEmailOption body) throws ApiException {
        okhttp3.Call localVarCall = userAddEmailValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<List<Email>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add email addresses (asynchronously)
     * 
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> EmailList </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call userAddEmailAsync(CreateEmailOption body, final ApiCallback<List<Email>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userAddEmailValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<List<Email>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userBlockUser
     * @param username username of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userBlockUserCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/block/{username}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userBlockUserValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling userBlockUser(Async)");
        }

        return userBlockUserCall(username, _callback);

    }

    /**
     * Blocks a user from the doer.
     * 
     * @param username username of the user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void userBlockUser(String username) throws ApiException {
        userBlockUserWithHttpInfo(username);
    }

    /**
     * Blocks a user from the doer.
     * 
     * @param username username of the user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userBlockUserWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = userBlockUserValidateBeforeCall(username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Blocks a user from the doer. (asynchronously)
     * 
     * @param username username of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userBlockUserAsync(String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userBlockUserValidateBeforeCall(username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCheckFollowing
     * @param username username of following user (required)
     * @param target username of followed user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCheckFollowingCall(String username, String target, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/following/{target}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "target" + "}", localVarApiClient.escapeString(target.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCheckFollowingValidateBeforeCall(String username, String target, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling userCheckFollowing(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling userCheckFollowing(Async)");
        }

        return userCheckFollowingCall(username, target, _callback);

    }

    /**
     * Check if one user is following another user
     * 
     * @param username username of following user (required)
     * @param target username of followed user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void userCheckFollowing(String username, String target) throws ApiException {
        userCheckFollowingWithHttpInfo(username, target);
    }

    /**
     * Check if one user is following another user
     * 
     * @param username username of following user (required)
     * @param target username of followed user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userCheckFollowingWithHttpInfo(String username, String target) throws ApiException {
        okhttp3.Call localVarCall = userCheckFollowingValidateBeforeCall(username, target, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check if one user is following another user (asynchronously)
     * 
     * @param username username of following user (required)
     * @param target username of followed user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCheckFollowingAsync(String username, String target, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCheckFollowingValidateBeforeCall(username, target, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCreateHook
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCreateHookCall(CreateHookOption body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user/hooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCreateHookValidateBeforeCall(CreateHookOption body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling userCreateHook(Async)");
        }

        return userCreateHookCall(body, _callback);

    }

    /**
     * Create a hook
     * 
     * @param body  (required)
     * @return Hook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public Hook userCreateHook(CreateHookOption body) throws ApiException {
        ApiResponse<Hook> localVarResp = userCreateHookWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Create a hook
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Hook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Hook> userCreateHookWithHttpInfo(CreateHookOption body) throws ApiException {
        okhttp3.Call localVarCall = userCreateHookValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a hook (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCreateHookAsync(CreateHookOption body, final ApiCallback<Hook> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCreateHookValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCreateOAuth2Application
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OAuth2Application </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call userCreateOAuth2ApplicationCall(CreateOAuth2ApplicationOptions body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user/applications/oauth2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCreateOAuth2ApplicationValidateBeforeCall(CreateOAuth2ApplicationOptions body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling userCreateOAuth2Application(Async)");
        }

        return userCreateOAuth2ApplicationCall(body, _callback);

    }

    /**
     * creates a new OAuth2 application
     * 
     * @param body  (required)
     * @return OAuth2Application
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OAuth2Application </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public OAuth2Application userCreateOAuth2Application(CreateOAuth2ApplicationOptions body) throws ApiException {
        ApiResponse<OAuth2Application> localVarResp = userCreateOAuth2ApplicationWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * creates a new OAuth2 application
     * 
     * @param body  (required)
     * @return ApiResponse&lt;OAuth2Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OAuth2Application </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<OAuth2Application> userCreateOAuth2ApplicationWithHttpInfo(CreateOAuth2ApplicationOptions body) throws ApiException {
        okhttp3.Call localVarCall = userCreateOAuth2ApplicationValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<OAuth2Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * creates a new OAuth2 application (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OAuth2Application </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call userCreateOAuth2ApplicationAsync(CreateOAuth2ApplicationOptions body, final ApiCallback<OAuth2Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCreateOAuth2ApplicationValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<OAuth2Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCreateToken
     * @param username username of user (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> AccessToken represents an API access token. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call userCreateTokenCall(String username, CreateAccessTokenOption body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/users/{username}/tokens"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCreateTokenValidateBeforeCall(String username, CreateAccessTokenOption body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling userCreateToken(Async)");
        }

        return userCreateTokenCall(username, body, _callback);

    }

    /**
     * Create an access token
     * 
     * @param username username of user (required)
     * @param body  (optional)
     * @return AccessToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> AccessToken represents an API access token. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public AccessToken userCreateToken(String username, CreateAccessTokenOption body) throws ApiException {
        ApiResponse<AccessToken> localVarResp = userCreateTokenWithHttpInfo(username, body);
        return localVarResp.getData();
    }

    /**
     * Create an access token
     * 
     * @param username username of user (required)
     * @param body  (optional)
     * @return ApiResponse&lt;AccessToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> AccessToken represents an API access token. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<AccessToken> userCreateTokenWithHttpInfo(String username, CreateAccessTokenOption body) throws ApiException {
        okhttp3.Call localVarCall = userCreateTokenValidateBeforeCall(username, body, null);
        Type localVarReturnType = new TypeToken<AccessToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an access token (asynchronously)
     * 
     * @param username username of user (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> AccessToken represents an API access token. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call userCreateTokenAsync(String username, CreateAccessTokenOption body, final ApiCallback<AccessToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCreateTokenValidateBeforeCall(username, body, _callback);
        Type localVarReturnType = new TypeToken<AccessToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCurrentCheckFollowing
     * @param username username of followed user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentCheckFollowingCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/following/{username}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCurrentCheckFollowingValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling userCurrentCheckFollowing(Async)");
        }

        return userCurrentCheckFollowingCall(username, _callback);

    }

    /**
     * Check whether a user is followed by the authenticated user
     * 
     * @param username username of followed user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void userCurrentCheckFollowing(String username) throws ApiException {
        userCurrentCheckFollowingWithHttpInfo(username);
    }

    /**
     * Check whether a user is followed by the authenticated user
     * 
     * @param username username of followed user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userCurrentCheckFollowingWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = userCurrentCheckFollowingValidateBeforeCall(username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check whether a user is followed by the authenticated user (asynchronously)
     * 
     * @param username username of followed user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentCheckFollowingAsync(String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCurrentCheckFollowingValidateBeforeCall(username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCurrentCheckStarring
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentCheckStarringCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/starred/{owner}/{repo}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCurrentCheckStarringValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling userCurrentCheckStarring(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling userCurrentCheckStarring(Async)");
        }

        return userCurrentCheckStarringCall(owner, repo, _callback);

    }

    /**
     * Whether the authenticated is starring the repo
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void userCurrentCheckStarring(String owner, String repo) throws ApiException {
        userCurrentCheckStarringWithHttpInfo(owner, repo);
    }

    /**
     * Whether the authenticated is starring the repo
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userCurrentCheckStarringWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = userCurrentCheckStarringValidateBeforeCall(owner, repo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Whether the authenticated is starring the repo (asynchronously)
     * 
     * @param owner owner of the repo (required)
     * @param repo name of the repo (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentCheckStarringAsync(String owner, String repo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCurrentCheckStarringValidateBeforeCall(owner, repo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCurrentDeleteFollow
     * @param username username of user to unfollow (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentDeleteFollowCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/following/{username}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCurrentDeleteFollowValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling userCurrentDeleteFollow(Async)");
        }

        return userCurrentDeleteFollowCall(username, _callback);

    }

    /**
     * Unfollow a user
     * 
     * @param username username of user to unfollow (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public void userCurrentDeleteFollow(String username) throws ApiException {
        userCurrentDeleteFollowWithHttpInfo(username);
    }

    /**
     * Unfollow a user
     * 
     * @param username username of user to unfollow (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userCurrentDeleteFollowWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = userCurrentDeleteFollowValidateBeforeCall(username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unfollow a user (asynchronously)
     * 
     * @param username username of user to unfollow (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentDeleteFollowAsync(String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCurrentDeleteFollowValidateBeforeCall(username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCurrentDeleteGPGKey
     * @param id id of key to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentDeleteGPGKeyCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/gpg_keys/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCurrentDeleteGPGKeyValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userCurrentDeleteGPGKey(Async)");
        }

        return userCurrentDeleteGPGKeyCall(id, _callback);

    }

    /**
     * Remove a GPG key
     * 
     * @param id id of key to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void userCurrentDeleteGPGKey(Long id) throws ApiException {
        userCurrentDeleteGPGKeyWithHttpInfo(id);
    }

    /**
     * Remove a GPG key
     * 
     * @param id id of key to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userCurrentDeleteGPGKeyWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = userCurrentDeleteGPGKeyValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a GPG key (asynchronously)
     * 
     * @param id id of key to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentDeleteGPGKeyAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCurrentDeleteGPGKeyValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCurrentDeleteKey
     * @param id id of key to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentDeleteKeyCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/keys/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCurrentDeleteKeyValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userCurrentDeleteKey(Async)");
        }

        return userCurrentDeleteKeyCall(id, _callback);

    }

    /**
     * Delete a public key
     * 
     * @param id id of key to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void userCurrentDeleteKey(Long id) throws ApiException {
        userCurrentDeleteKeyWithHttpInfo(id);
    }

    /**
     * Delete a public key
     * 
     * @param id id of key to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userCurrentDeleteKeyWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = userCurrentDeleteKeyValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a public key (asynchronously)
     * 
     * @param id id of key to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentDeleteKeyAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCurrentDeleteKeyValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCurrentDeleteStar
     * @param owner owner of the repo to unstar (required)
     * @param repo name of the repo to unstar (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentDeleteStarCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/starred/{owner}/{repo}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCurrentDeleteStarValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling userCurrentDeleteStar(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling userCurrentDeleteStar(Async)");
        }

        return userCurrentDeleteStarCall(owner, repo, _callback);

    }

    /**
     * Unstar the given repo
     * 
     * @param owner owner of the repo to unstar (required)
     * @param repo name of the repo to unstar (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public void userCurrentDeleteStar(String owner, String repo) throws ApiException {
        userCurrentDeleteStarWithHttpInfo(owner, repo);
    }

    /**
     * Unstar the given repo
     * 
     * @param owner owner of the repo to unstar (required)
     * @param repo name of the repo to unstar (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userCurrentDeleteStarWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = userCurrentDeleteStarValidateBeforeCall(owner, repo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unstar the given repo (asynchronously)
     * 
     * @param owner owner of the repo to unstar (required)
     * @param repo name of the repo to unstar (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentDeleteStarAsync(String owner, String repo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCurrentDeleteStarValidateBeforeCall(owner, repo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCurrentGetGPGKey
     * @param id id of key to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GPGKey </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentGetGPGKeyCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/gpg_keys/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCurrentGetGPGKeyValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userCurrentGetGPGKey(Async)");
        }

        return userCurrentGetGPGKeyCall(id, _callback);

    }

    /**
     * Get a GPG key
     * 
     * @param id id of key to get (required)
     * @return GPGKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GPGKey </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public GPGKey userCurrentGetGPGKey(Long id) throws ApiException {
        ApiResponse<GPGKey> localVarResp = userCurrentGetGPGKeyWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a GPG key
     * 
     * @param id id of key to get (required)
     * @return ApiResponse&lt;GPGKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GPGKey </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GPGKey> userCurrentGetGPGKeyWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = userCurrentGetGPGKeyValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GPGKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a GPG key (asynchronously)
     * 
     * @param id id of key to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GPGKey </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentGetGPGKeyAsync(Long id, final ApiCallback<GPGKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCurrentGetGPGKeyValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GPGKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCurrentGetKey
     * @param id id of key to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PublicKey </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentGetKeyCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/keys/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCurrentGetKeyValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userCurrentGetKey(Async)");
        }

        return userCurrentGetKeyCall(id, _callback);

    }

    /**
     * Get a public key
     * 
     * @param id id of key to get (required)
     * @return PublicKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PublicKey </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public PublicKey userCurrentGetKey(Long id) throws ApiException {
        ApiResponse<PublicKey> localVarResp = userCurrentGetKeyWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a public key
     * 
     * @param id id of key to get (required)
     * @return ApiResponse&lt;PublicKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PublicKey </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicKey> userCurrentGetKeyWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = userCurrentGetKeyValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PublicKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a public key (asynchronously)
     * 
     * @param id id of key to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PublicKey </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentGetKeyAsync(Long id, final ApiCallback<PublicKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCurrentGetKeyValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PublicKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCurrentListFollowers
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentListFollowersCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/followers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCurrentListFollowersValidateBeforeCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return userCurrentListFollowersCall(page, limit, _callback);

    }

    /**
     * List the authenticated user&#39;s followers
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public List<User> userCurrentListFollowers(Integer page, Integer limit) throws ApiException {
        ApiResponse<List<User>> localVarResp = userCurrentListFollowersWithHttpInfo(page, limit);
        return localVarResp.getData();
    }

    /**
     * List the authenticated user&#39;s followers
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> userCurrentListFollowersWithHttpInfo(Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = userCurrentListFollowersValidateBeforeCall(page, limit, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the authenticated user&#39;s followers (asynchronously)
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentListFollowersAsync(Integer page, Integer limit, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCurrentListFollowersValidateBeforeCall(page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCurrentListFollowing
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentListFollowingCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/following";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCurrentListFollowingValidateBeforeCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return userCurrentListFollowingCall(page, limit, _callback);

    }

    /**
     * List the users that the authenticated user is following
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public List<User> userCurrentListFollowing(Integer page, Integer limit) throws ApiException {
        ApiResponse<List<User>> localVarResp = userCurrentListFollowingWithHttpInfo(page, limit);
        return localVarResp.getData();
    }

    /**
     * List the users that the authenticated user is following
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> userCurrentListFollowingWithHttpInfo(Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = userCurrentListFollowingValidateBeforeCall(page, limit, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the users that the authenticated user is following (asynchronously)
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentListFollowingAsync(Integer page, Integer limit, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCurrentListFollowingValidateBeforeCall(page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCurrentListGPGKeys
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GPGKeyList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentListGPGKeysCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/gpg_keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCurrentListGPGKeysValidateBeforeCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return userCurrentListGPGKeysCall(page, limit, _callback);

    }

    /**
     * List the authenticated user&#39;s GPG keys
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;GPGKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GPGKeyList </td><td>  -  </td></tr>
     </table>
     */
    public List<GPGKey> userCurrentListGPGKeys(Integer page, Integer limit) throws ApiException {
        ApiResponse<List<GPGKey>> localVarResp = userCurrentListGPGKeysWithHttpInfo(page, limit);
        return localVarResp.getData();
    }

    /**
     * List the authenticated user&#39;s GPG keys
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;GPGKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GPGKeyList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GPGKey>> userCurrentListGPGKeysWithHttpInfo(Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = userCurrentListGPGKeysValidateBeforeCall(page, limit, null);
        Type localVarReturnType = new TypeToken<List<GPGKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the authenticated user&#39;s GPG keys (asynchronously)
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GPGKeyList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentListGPGKeysAsync(Integer page, Integer limit, final ApiCallback<List<GPGKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCurrentListGPGKeysValidateBeforeCall(page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<GPGKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCurrentListKeys
     * @param fingerprint fingerprint of the key (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PublicKeyList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentListKeysCall(String fingerprint, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fingerprint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fingerprint", fingerprint));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCurrentListKeysValidateBeforeCall(String fingerprint, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return userCurrentListKeysCall(fingerprint, page, limit, _callback);

    }

    /**
     * List the authenticated user&#39;s public keys
     * 
     * @param fingerprint fingerprint of the key (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;PublicKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PublicKeyList </td><td>  -  </td></tr>
     </table>
     */
    public List<PublicKey> userCurrentListKeys(String fingerprint, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<PublicKey>> localVarResp = userCurrentListKeysWithHttpInfo(fingerprint, page, limit);
        return localVarResp.getData();
    }

    /**
     * List the authenticated user&#39;s public keys
     * 
     * @param fingerprint fingerprint of the key (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;PublicKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PublicKeyList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PublicKey>> userCurrentListKeysWithHttpInfo(String fingerprint, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = userCurrentListKeysValidateBeforeCall(fingerprint, page, limit, null);
        Type localVarReturnType = new TypeToken<List<PublicKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the authenticated user&#39;s public keys (asynchronously)
     * 
     * @param fingerprint fingerprint of the key (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PublicKeyList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentListKeysAsync(String fingerprint, Integer page, Integer limit, final ApiCallback<List<PublicKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCurrentListKeysValidateBeforeCall(fingerprint, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<PublicKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCurrentListRepos
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentListReposCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/repos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCurrentListReposValidateBeforeCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return userCurrentListReposCall(page, limit, _callback);

    }

    /**
     * List the repos that the authenticated user owns
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public List<Repository> userCurrentListRepos(Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Repository>> localVarResp = userCurrentListReposWithHttpInfo(page, limit);
        return localVarResp.getData();
    }

    /**
     * List the repos that the authenticated user owns
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Repository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Repository>> userCurrentListReposWithHttpInfo(Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = userCurrentListReposValidateBeforeCall(page, limit, null);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the repos that the authenticated user owns (asynchronously)
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentListReposAsync(Integer page, Integer limit, final ApiCallback<List<Repository>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCurrentListReposValidateBeforeCall(page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCurrentListStarred
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentListStarredCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/starred";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCurrentListStarredValidateBeforeCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return userCurrentListStarredCall(page, limit, _callback);

    }

    /**
     * The repos that the authenticated user has starred
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public List<Repository> userCurrentListStarred(Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Repository>> localVarResp = userCurrentListStarredWithHttpInfo(page, limit);
        return localVarResp.getData();
    }

    /**
     * The repos that the authenticated user has starred
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Repository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Repository>> userCurrentListStarredWithHttpInfo(Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = userCurrentListStarredValidateBeforeCall(page, limit, null);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * The repos that the authenticated user has starred (asynchronously)
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentListStarredAsync(Integer page, Integer limit, final ApiCallback<List<Repository>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCurrentListStarredValidateBeforeCall(page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCurrentListSubscriptions
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentListSubscriptionsCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCurrentListSubscriptionsValidateBeforeCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return userCurrentListSubscriptionsCall(page, limit, _callback);

    }

    /**
     * List repositories watched by the authenticated user
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public List<Repository> userCurrentListSubscriptions(Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Repository>> localVarResp = userCurrentListSubscriptionsWithHttpInfo(page, limit);
        return localVarResp.getData();
    }

    /**
     * List repositories watched by the authenticated user
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Repository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Repository>> userCurrentListSubscriptionsWithHttpInfo(Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = userCurrentListSubscriptionsValidateBeforeCall(page, limit, null);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repositories watched by the authenticated user (asynchronously)
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentListSubscriptionsAsync(Integer page, Integer limit, final ApiCallback<List<Repository>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCurrentListSubscriptionsValidateBeforeCall(page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCurrentPostGPGKey
     * @param form  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> GPGKey </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentPostGPGKeyCall(CreateGPGKeyOption form, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = form;

        // create path and map variables
        String localVarPath = "/user/gpg_keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCurrentPostGPGKeyValidateBeforeCall(CreateGPGKeyOption form, final ApiCallback _callback) throws ApiException {
        return userCurrentPostGPGKeyCall(form, _callback);

    }

    /**
     * Create a GPG key
     * 
     * @param form  (optional)
     * @return GPGKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> GPGKey </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public GPGKey userCurrentPostGPGKey(CreateGPGKeyOption form) throws ApiException {
        ApiResponse<GPGKey> localVarResp = userCurrentPostGPGKeyWithHttpInfo(form);
        return localVarResp.getData();
    }

    /**
     * Create a GPG key
     * 
     * @param form  (optional)
     * @return ApiResponse&lt;GPGKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> GPGKey </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<GPGKey> userCurrentPostGPGKeyWithHttpInfo(CreateGPGKeyOption form) throws ApiException {
        okhttp3.Call localVarCall = userCurrentPostGPGKeyValidateBeforeCall(form, null);
        Type localVarReturnType = new TypeToken<GPGKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a GPG key (asynchronously)
     * 
     * @param form  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> GPGKey </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentPostGPGKeyAsync(CreateGPGKeyOption form, final ApiCallback<GPGKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCurrentPostGPGKeyValidateBeforeCall(form, _callback);
        Type localVarReturnType = new TypeToken<GPGKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCurrentPostKey
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> PublicKey </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentPostKeyCall(CreateKeyOption body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user/keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCurrentPostKeyValidateBeforeCall(CreateKeyOption body, final ApiCallback _callback) throws ApiException {
        return userCurrentPostKeyCall(body, _callback);

    }

    /**
     * Create a public key
     * 
     * @param body  (optional)
     * @return PublicKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> PublicKey </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public PublicKey userCurrentPostKey(CreateKeyOption body) throws ApiException {
        ApiResponse<PublicKey> localVarResp = userCurrentPostKeyWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Create a public key
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;PublicKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> PublicKey </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<PublicKey> userCurrentPostKeyWithHttpInfo(CreateKeyOption body) throws ApiException {
        okhttp3.Call localVarCall = userCurrentPostKeyValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<PublicKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a public key (asynchronously)
     * 
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> PublicKey </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentPostKeyAsync(CreateKeyOption body, final ApiCallback<PublicKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCurrentPostKeyValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<PublicKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCurrentPutFollow
     * @param username username of user to follow (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentPutFollowCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/following/{username}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCurrentPutFollowValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling userCurrentPutFollow(Async)");
        }

        return userCurrentPutFollowCall(username, _callback);

    }

    /**
     * Follow a user
     * 
     * @param username username of user to follow (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public void userCurrentPutFollow(String username) throws ApiException {
        userCurrentPutFollowWithHttpInfo(username);
    }

    /**
     * Follow a user
     * 
     * @param username username of user to follow (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> userCurrentPutFollowWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = userCurrentPutFollowValidateBeforeCall(username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Follow a user (asynchronously)
     * 
     * @param username username of user to follow (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> APIForbiddenError is a forbidden error response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentPutFollowAsync(String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCurrentPutFollowValidateBeforeCall(username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCurrentPutStar
     * @param owner owner of the repo to star (required)
     * @param repo name of the repo to star (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentPutStarCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/starred/{owner}/{repo}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCurrentPutStarValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling userCurrentPutStar(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling userCurrentPutStar(Async)");
        }

        return userCurrentPutStarCall(owner, repo, _callback);

    }

    /**
     * Star the given repo
     * 
     * @param owner owner of the repo to star (required)
     * @param repo name of the repo to star (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public void userCurrentPutStar(String owner, String repo) throws ApiException {
        userCurrentPutStarWithHttpInfo(owner, repo);
    }

    /**
     * Star the given repo
     * 
     * @param owner owner of the repo to star (required)
     * @param repo name of the repo to star (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userCurrentPutStarWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = userCurrentPutStarValidateBeforeCall(owner, repo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Star the given repo (asynchronously)
     * 
     * @param owner owner of the repo to star (required)
     * @param repo name of the repo to star (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentPutStarAsync(String owner, String repo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCurrentPutStarValidateBeforeCall(owner, repo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCurrentTrackedTimes
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param since Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TrackedTimeList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentTrackedTimesCall(Integer page, Integer limit, OffsetDateTime since, OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/times";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCurrentTrackedTimesValidateBeforeCall(Integer page, Integer limit, OffsetDateTime since, OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        return userCurrentTrackedTimesCall(page, limit, since, before, _callback);

    }

    /**
     * List the current user&#39;s tracked times
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param since Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @return List&lt;TrackedTime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TrackedTimeList </td><td>  -  </td></tr>
     </table>
     */
    public List<TrackedTime> userCurrentTrackedTimes(Integer page, Integer limit, OffsetDateTime since, OffsetDateTime before) throws ApiException {
        ApiResponse<List<TrackedTime>> localVarResp = userCurrentTrackedTimesWithHttpInfo(page, limit, since, before);
        return localVarResp.getData();
    }

    /**
     * List the current user&#39;s tracked times
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param since Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @return ApiResponse&lt;List&lt;TrackedTime&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TrackedTimeList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TrackedTime>> userCurrentTrackedTimesWithHttpInfo(Integer page, Integer limit, OffsetDateTime since, OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = userCurrentTrackedTimesValidateBeforeCall(page, limit, since, before, null);
        Type localVarReturnType = new TypeToken<List<TrackedTime>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the current user&#39;s tracked times (asynchronously)
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param since Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)
     * @param before Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TrackedTimeList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCurrentTrackedTimesAsync(Integer page, Integer limit, OffsetDateTime since, OffsetDateTime before, final ApiCallback<List<TrackedTime>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCurrentTrackedTimesValidateBeforeCall(page, limit, since, before, _callback);
        Type localVarReturnType = new TypeToken<List<TrackedTime>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userDeleteAccessToken
     * @param username username of user (required)
     * @param token token to be deleted, identified by ID and if not available by name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call userDeleteAccessTokenCall(String username, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/tokens/{token}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userDeleteAccessTokenValidateBeforeCall(String username, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling userDeleteAccessToken(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling userDeleteAccessToken(Async)");
        }

        return userDeleteAccessTokenCall(username, token, _callback);

    }

    /**
     * delete an access token
     * 
     * @param username username of user (required)
     * @param token token to be deleted, identified by ID and if not available by name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public void userDeleteAccessToken(String username, String token) throws ApiException {
        userDeleteAccessTokenWithHttpInfo(username, token);
    }

    /**
     * delete an access token
     * 
     * @param username username of user (required)
     * @param token token to be deleted, identified by ID and if not available by name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> userDeleteAccessTokenWithHttpInfo(String username, String token) throws ApiException {
        okhttp3.Call localVarCall = userDeleteAccessTokenValidateBeforeCall(username, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * delete an access token (asynchronously)
     * 
     * @param username username of user (required)
     * @param token token to be deleted, identified by ID and if not available by name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIError is error format response </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call userDeleteAccessTokenAsync(String username, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userDeleteAccessTokenValidateBeforeCall(username, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userDeleteEmail
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userDeleteEmailCall(DeleteEmailOption body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user/emails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userDeleteEmailValidateBeforeCall(DeleteEmailOption body, final ApiCallback _callback) throws ApiException {
        return userDeleteEmailCall(body, _callback);

    }

    /**
     * Delete email addresses
     * 
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void userDeleteEmail(DeleteEmailOption body) throws ApiException {
        userDeleteEmailWithHttpInfo(body);
    }

    /**
     * Delete email addresses
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userDeleteEmailWithHttpInfo(DeleteEmailOption body) throws ApiException {
        okhttp3.Call localVarCall = userDeleteEmailValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete email addresses (asynchronously)
     * 
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userDeleteEmailAsync(DeleteEmailOption body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userDeleteEmailValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userDeleteHook
     * @param id id of the hook to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userDeleteHookCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/hooks/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userDeleteHookValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userDeleteHook(Async)");
        }

        return userDeleteHookCall(id, _callback);

    }

    /**
     * Delete a hook
     * 
     * @param id id of the hook to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public void userDeleteHook(Long id) throws ApiException {
        userDeleteHookWithHttpInfo(id);
    }

    /**
     * Delete a hook
     * 
     * @param id id of the hook to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userDeleteHookWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = userDeleteHookValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a hook (asynchronously)
     * 
     * @param id id of the hook to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userDeleteHookAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userDeleteHookValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userDeleteOAuth2Application
     * @param id token to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userDeleteOAuth2ApplicationCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/applications/oauth2/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userDeleteOAuth2ApplicationValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userDeleteOAuth2Application(Async)");
        }

        return userDeleteOAuth2ApplicationCall(id, _callback);

    }

    /**
     * delete an OAuth2 Application
     * 
     * @param id token to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void userDeleteOAuth2Application(Long id) throws ApiException {
        userDeleteOAuth2ApplicationWithHttpInfo(id);
    }

    /**
     * delete an OAuth2 Application
     * 
     * @param id token to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userDeleteOAuth2ApplicationWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = userDeleteOAuth2ApplicationValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * delete an OAuth2 Application (asynchronously)
     * 
     * @param id token to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userDeleteOAuth2ApplicationAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userDeleteOAuth2ApplicationValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userEditHook
     * @param id id of the hook to update (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userEditHookCall(Long id, EditHookOption body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user/hooks/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userEditHookValidateBeforeCall(Long id, EditHookOption body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userEditHook(Async)");
        }

        return userEditHookCall(id, body, _callback);

    }

    /**
     * Update a hook
     * 
     * @param id id of the hook to update (required)
     * @param body  (optional)
     * @return Hook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public Hook userEditHook(Long id, EditHookOption body) throws ApiException {
        ApiResponse<Hook> localVarResp = userEditHookWithHttpInfo(id, body);
        return localVarResp.getData();
    }

    /**
     * Update a hook
     * 
     * @param id id of the hook to update (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Hook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Hook> userEditHookWithHttpInfo(Long id, EditHookOption body) throws ApiException {
        okhttp3.Call localVarCall = userEditHookValidateBeforeCall(id, body, null);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a hook (asynchronously)
     * 
     * @param id id of the hook to update (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userEditHookAsync(Long id, EditHookOption body, final ApiCallback<Hook> _callback) throws ApiException {

        okhttp3.Call localVarCall = userEditHookValidateBeforeCall(id, body, _callback);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userGet
     * @param username username of user to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userGetValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling userGet(Async)");
        }

        return userGetCall(username, _callback);

    }

    /**
     * Get a user
     * 
     * @param username username of user to get (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public User userGet(String username) throws ApiException {
        ApiResponse<User> localVarResp = userGetWithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * Get a user
     * 
     * @param username username of user to get (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> userGetWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = userGetValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a user (asynchronously)
     * 
     * @param username username of user to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetAsync(String username, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = userGetValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userGetCurrent
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetCurrentCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userGetCurrentValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return userGetCurrentCall(_callback);

    }

    /**
     * Get the authenticated user
     * 
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
     </table>
     */
    public User userGetCurrent() throws ApiException {
        ApiResponse<User> localVarResp = userGetCurrentWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the authenticated user
     * 
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> userGetCurrentWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = userGetCurrentValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the authenticated user (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetCurrentAsync(final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = userGetCurrentValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userGetHeatmapData
     * @param username username of user to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserHeatmapData </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetHeatmapDataCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/heatmap"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userGetHeatmapDataValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling userGetHeatmapData(Async)");
        }

        return userGetHeatmapDataCall(username, _callback);

    }

    /**
     * Get a user&#39;s heatmap
     * 
     * @param username username of user to get (required)
     * @return List&lt;UserHeatmapData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserHeatmapData </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public List<UserHeatmapData> userGetHeatmapData(String username) throws ApiException {
        ApiResponse<List<UserHeatmapData>> localVarResp = userGetHeatmapDataWithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * Get a user&#39;s heatmap
     * 
     * @param username username of user to get (required)
     * @return ApiResponse&lt;List&lt;UserHeatmapData&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserHeatmapData </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserHeatmapData>> userGetHeatmapDataWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = userGetHeatmapDataValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<List<UserHeatmapData>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a user&#39;s heatmap (asynchronously)
     * 
     * @param username username of user to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserHeatmapData </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetHeatmapDataAsync(String username, final ApiCallback<List<UserHeatmapData>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userGetHeatmapDataValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<List<UserHeatmapData>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userGetHook
     * @param id id of the hook to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetHookCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/hooks/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userGetHookValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userGetHook(Async)");
        }

        return userGetHookCall(id, _callback);

    }

    /**
     * Get a hook
     * 
     * @param id id of the hook to get (required)
     * @return Hook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public Hook userGetHook(Long id) throws ApiException {
        ApiResponse<Hook> localVarResp = userGetHookWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a hook
     * 
     * @param id id of the hook to get (required)
     * @return ApiResponse&lt;Hook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Hook> userGetHookWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = userGetHookValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a hook (asynchronously)
     * 
     * @param id id of the hook to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Hook </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetHookAsync(Long id, final ApiCallback<Hook> _callback) throws ApiException {

        okhttp3.Call localVarCall = userGetHookValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userGetOAuth2Application
     * @param id Application ID to be found (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth2Application </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetOAuth2ApplicationCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/applications/oauth2/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userGetOAuth2ApplicationValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userGetOAuth2Application(Async)");
        }

        return userGetOAuth2ApplicationCall(id, _callback);

    }

    /**
     * get an OAuth2 Application
     * 
     * @param id Application ID to be found (required)
     * @return OAuth2Application
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth2Application </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public OAuth2Application userGetOAuth2Application(Long id) throws ApiException {
        ApiResponse<OAuth2Application> localVarResp = userGetOAuth2ApplicationWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * get an OAuth2 Application
     * 
     * @param id Application ID to be found (required)
     * @return ApiResponse&lt;OAuth2Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth2Application </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuth2Application> userGetOAuth2ApplicationWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = userGetOAuth2ApplicationValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<OAuth2Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get an OAuth2 Application (asynchronously)
     * 
     * @param id Application ID to be found (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth2Application </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetOAuth2ApplicationAsync(Long id, final ApiCallback<OAuth2Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = userGetOAuth2ApplicationValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<OAuth2Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userGetOauth2Application
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth2ApplicationList represents a list of OAuth2 applications. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetOauth2ApplicationCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/applications/oauth2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userGetOauth2ApplicationValidateBeforeCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return userGetOauth2ApplicationCall(page, limit, _callback);

    }

    /**
     * List the authenticated user&#39;s oauth2 applications
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;OAuth2Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth2ApplicationList represents a list of OAuth2 applications. </td><td>  -  </td></tr>
     </table>
     */
    public List<OAuth2Application> userGetOauth2Application(Integer page, Integer limit) throws ApiException {
        ApiResponse<List<OAuth2Application>> localVarResp = userGetOauth2ApplicationWithHttpInfo(page, limit);
        return localVarResp.getData();
    }

    /**
     * List the authenticated user&#39;s oauth2 applications
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;OAuth2Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth2ApplicationList represents a list of OAuth2 applications. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OAuth2Application>> userGetOauth2ApplicationWithHttpInfo(Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = userGetOauth2ApplicationValidateBeforeCall(page, limit, null);
        Type localVarReturnType = new TypeToken<List<OAuth2Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the authenticated user&#39;s oauth2 applications (asynchronously)
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth2ApplicationList represents a list of OAuth2 applications. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetOauth2ApplicationAsync(Integer page, Integer limit, final ApiCallback<List<OAuth2Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userGetOauth2ApplicationValidateBeforeCall(page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<OAuth2Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userGetStopWatches
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StopWatchList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetStopWatchesCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/stopwatches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userGetStopWatchesValidateBeforeCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return userGetStopWatchesCall(page, limit, _callback);

    }

    /**
     * Get list of all existing stopwatches
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;StopWatch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StopWatchList </td><td>  -  </td></tr>
     </table>
     */
    public List<StopWatch> userGetStopWatches(Integer page, Integer limit) throws ApiException {
        ApiResponse<List<StopWatch>> localVarResp = userGetStopWatchesWithHttpInfo(page, limit);
        return localVarResp.getData();
    }

    /**
     * Get list of all existing stopwatches
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;StopWatch&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StopWatchList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<StopWatch>> userGetStopWatchesWithHttpInfo(Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = userGetStopWatchesValidateBeforeCall(page, limit, null);
        Type localVarReturnType = new TypeToken<List<StopWatch>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of all existing stopwatches (asynchronously)
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StopWatchList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetStopWatchesAsync(Integer page, Integer limit, final ApiCallback<List<StopWatch>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userGetStopWatchesValidateBeforeCall(page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<StopWatch>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userGetTokens
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AccessTokenList represents a list of API access token. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetTokensCall(String username, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/tokens"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userGetTokensValidateBeforeCall(String username, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling userGetTokens(Async)");
        }

        return userGetTokensCall(username, page, limit, _callback);

    }

    /**
     * List the authenticated user&#39;s access tokens
     * 
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;AccessToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AccessTokenList represents a list of API access token. </td><td>  -  </td></tr>
     </table>
     */
    public List<AccessToken> userGetTokens(String username, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<AccessToken>> localVarResp = userGetTokensWithHttpInfo(username, page, limit);
        return localVarResp.getData();
    }

    /**
     * List the authenticated user&#39;s access tokens
     * 
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;AccessToken&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AccessTokenList represents a list of API access token. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AccessToken>> userGetTokensWithHttpInfo(String username, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = userGetTokensValidateBeforeCall(username, page, limit, null);
        Type localVarReturnType = new TypeToken<List<AccessToken>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the authenticated user&#39;s access tokens (asynchronously)
     * 
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AccessTokenList represents a list of API access token. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetTokensAsync(String username, Integer page, Integer limit, final ApiCallback<List<AccessToken>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userGetTokensValidateBeforeCall(username, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<AccessToken>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userListActivityFeeds
     * @param username username of user (required)
     * @param onlyPerformedBy if true, only show actions performed by the requested user (optional)
     * @param date the date of the activities to be found (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ActivityFeedsList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userListActivityFeedsCall(String username, Boolean onlyPerformedBy, LocalDate date, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/activities/feeds"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (onlyPerformedBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("only-performed-by", onlyPerformedBy));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userListActivityFeedsValidateBeforeCall(String username, Boolean onlyPerformedBy, LocalDate date, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling userListActivityFeeds(Async)");
        }

        return userListActivityFeedsCall(username, onlyPerformedBy, date, page, limit, _callback);

    }

    /**
     * List a user&#39;s activity feeds
     * 
     * @param username username of user (required)
     * @param onlyPerformedBy if true, only show actions performed by the requested user (optional)
     * @param date the date of the activities to be found (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Activity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ActivityFeedsList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public List<Activity> userListActivityFeeds(String username, Boolean onlyPerformedBy, LocalDate date, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Activity>> localVarResp = userListActivityFeedsWithHttpInfo(username, onlyPerformedBy, date, page, limit);
        return localVarResp.getData();
    }

    /**
     * List a user&#39;s activity feeds
     * 
     * @param username username of user (required)
     * @param onlyPerformedBy if true, only show actions performed by the requested user (optional)
     * @param date the date of the activities to be found (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Activity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ActivityFeedsList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Activity>> userListActivityFeedsWithHttpInfo(String username, Boolean onlyPerformedBy, LocalDate date, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = userListActivityFeedsValidateBeforeCall(username, onlyPerformedBy, date, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Activity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a user&#39;s activity feeds (asynchronously)
     * 
     * @param username username of user (required)
     * @param onlyPerformedBy if true, only show actions performed by the requested user (optional)
     * @param date the date of the activities to be found (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ActivityFeedsList </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userListActivityFeedsAsync(String username, Boolean onlyPerformedBy, LocalDate date, Integer page, Integer limit, final ApiCallback<List<Activity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userListActivityFeedsValidateBeforeCall(username, onlyPerformedBy, date, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Activity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userListBlockedUsers
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BlockedUserList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userListBlockedUsersCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/list_blocked";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userListBlockedUsersValidateBeforeCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return userListBlockedUsersCall(page, limit, _callback);

    }

    /**
     * List the authenticated user&#39;s blocked users
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;BlockedUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BlockedUserList </td><td>  -  </td></tr>
     </table>
     */
    public List<BlockedUser> userListBlockedUsers(Integer page, Integer limit) throws ApiException {
        ApiResponse<List<BlockedUser>> localVarResp = userListBlockedUsersWithHttpInfo(page, limit);
        return localVarResp.getData();
    }

    /**
     * List the authenticated user&#39;s blocked users
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;BlockedUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BlockedUserList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BlockedUser>> userListBlockedUsersWithHttpInfo(Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = userListBlockedUsersValidateBeforeCall(page, limit, null);
        Type localVarReturnType = new TypeToken<List<BlockedUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the authenticated user&#39;s blocked users (asynchronously)
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> BlockedUserList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userListBlockedUsersAsync(Integer page, Integer limit, final ApiCallback<List<BlockedUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userListBlockedUsersValidateBeforeCall(page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<BlockedUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userListEmails
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> EmailList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userListEmailsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/emails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userListEmailsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return userListEmailsCall(_callback);

    }

    /**
     * List the authenticated user&#39;s email addresses
     * 
     * @return List&lt;Email&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> EmailList </td><td>  -  </td></tr>
     </table>
     */
    public List<Email> userListEmails() throws ApiException {
        ApiResponse<List<Email>> localVarResp = userListEmailsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List the authenticated user&#39;s email addresses
     * 
     * @return ApiResponse&lt;List&lt;Email&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> EmailList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Email>> userListEmailsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = userListEmailsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Email>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the authenticated user&#39;s email addresses (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> EmailList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userListEmailsAsync(final ApiCallback<List<Email>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userListEmailsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Email>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userListFollowers
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userListFollowersCall(String username, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/followers"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userListFollowersValidateBeforeCall(String username, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling userListFollowers(Async)");
        }

        return userListFollowersCall(username, page, limit, _callback);

    }

    /**
     * List the given user&#39;s followers
     * 
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public List<User> userListFollowers(String username, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<User>> localVarResp = userListFollowersWithHttpInfo(username, page, limit);
        return localVarResp.getData();
    }

    /**
     * List the given user&#39;s followers
     * 
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> userListFollowersWithHttpInfo(String username, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = userListFollowersValidateBeforeCall(username, page, limit, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the given user&#39;s followers (asynchronously)
     * 
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userListFollowersAsync(String username, Integer page, Integer limit, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userListFollowersValidateBeforeCall(username, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userListFollowing
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userListFollowingCall(String username, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/following"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userListFollowingValidateBeforeCall(String username, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling userListFollowing(Async)");
        }

        return userListFollowingCall(username, page, limit, _callback);

    }

    /**
     * List the users that the given user is following
     * 
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public List<User> userListFollowing(String username, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<User>> localVarResp = userListFollowingWithHttpInfo(username, page, limit);
        return localVarResp.getData();
    }

    /**
     * List the users that the given user is following
     * 
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> userListFollowingWithHttpInfo(String username, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = userListFollowingValidateBeforeCall(username, page, limit, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the users that the given user is following (asynchronously)
     * 
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> UserList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userListFollowingAsync(String username, Integer page, Integer limit, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userListFollowingValidateBeforeCall(username, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userListGPGKeys
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GPGKeyList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userListGPGKeysCall(String username, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/gpg_keys"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userListGPGKeysValidateBeforeCall(String username, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling userListGPGKeys(Async)");
        }

        return userListGPGKeysCall(username, page, limit, _callback);

    }

    /**
     * List the given user&#39;s GPG keys
     * 
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;GPGKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GPGKeyList </td><td>  -  </td></tr>
     </table>
     */
    public List<GPGKey> userListGPGKeys(String username, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<GPGKey>> localVarResp = userListGPGKeysWithHttpInfo(username, page, limit);
        return localVarResp.getData();
    }

    /**
     * List the given user&#39;s GPG keys
     * 
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;GPGKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GPGKeyList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GPGKey>> userListGPGKeysWithHttpInfo(String username, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = userListGPGKeysValidateBeforeCall(username, page, limit, null);
        Type localVarReturnType = new TypeToken<List<GPGKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the given user&#39;s GPG keys (asynchronously)
     * 
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GPGKeyList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userListGPGKeysAsync(String username, Integer page, Integer limit, final ApiCallback<List<GPGKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userListGPGKeysValidateBeforeCall(username, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<GPGKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userListHooks
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HookList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userListHooksCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/hooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userListHooksValidateBeforeCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return userListHooksCall(page, limit, _callback);

    }

    /**
     * List the authenticated user&#39;s webhooks
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Hook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HookList </td><td>  -  </td></tr>
     </table>
     */
    public List<Hook> userListHooks(Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Hook>> localVarResp = userListHooksWithHttpInfo(page, limit);
        return localVarResp.getData();
    }

    /**
     * List the authenticated user&#39;s webhooks
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Hook&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HookList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Hook>> userListHooksWithHttpInfo(Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = userListHooksValidateBeforeCall(page, limit, null);
        Type localVarReturnType = new TypeToken<List<Hook>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the authenticated user&#39;s webhooks (asynchronously)
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HookList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userListHooksAsync(Integer page, Integer limit, final ApiCallback<List<Hook>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userListHooksValidateBeforeCall(page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Hook>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userListKeys
     * @param username username of user (required)
     * @param fingerprint fingerprint of the key (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PublicKeyList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userListKeysCall(String username, String fingerprint, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/keys"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fingerprint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fingerprint", fingerprint));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userListKeysValidateBeforeCall(String username, String fingerprint, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling userListKeys(Async)");
        }

        return userListKeysCall(username, fingerprint, page, limit, _callback);

    }

    /**
     * List the given user&#39;s public keys
     * 
     * @param username username of user (required)
     * @param fingerprint fingerprint of the key (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;PublicKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PublicKeyList </td><td>  -  </td></tr>
     </table>
     */
    public List<PublicKey> userListKeys(String username, String fingerprint, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<PublicKey>> localVarResp = userListKeysWithHttpInfo(username, fingerprint, page, limit);
        return localVarResp.getData();
    }

    /**
     * List the given user&#39;s public keys
     * 
     * @param username username of user (required)
     * @param fingerprint fingerprint of the key (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;PublicKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PublicKeyList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PublicKey>> userListKeysWithHttpInfo(String username, String fingerprint, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = userListKeysValidateBeforeCall(username, fingerprint, page, limit, null);
        Type localVarReturnType = new TypeToken<List<PublicKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the given user&#39;s public keys (asynchronously)
     * 
     * @param username username of user (required)
     * @param fingerprint fingerprint of the key (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PublicKeyList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userListKeysAsync(String username, String fingerprint, Integer page, Integer limit, final ApiCallback<List<PublicKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userListKeysValidateBeforeCall(username, fingerprint, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<PublicKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userListRepos
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userListReposCall(String username, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/repos"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userListReposValidateBeforeCall(String username, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling userListRepos(Async)");
        }

        return userListReposCall(username, page, limit, _callback);

    }

    /**
     * List the repos owned by the given user
     * 
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public List<Repository> userListRepos(String username, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Repository>> localVarResp = userListReposWithHttpInfo(username, page, limit);
        return localVarResp.getData();
    }

    /**
     * List the repos owned by the given user
     * 
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Repository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Repository>> userListReposWithHttpInfo(String username, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = userListReposValidateBeforeCall(username, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the repos owned by the given user (asynchronously)
     * 
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userListReposAsync(String username, Integer page, Integer limit, final ApiCallback<List<Repository>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userListReposValidateBeforeCall(username, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userListStarred
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userListStarredCall(String username, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/starred"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userListStarredValidateBeforeCall(String username, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling userListStarred(Async)");
        }

        return userListStarredCall(username, page, limit, _callback);

    }

    /**
     * The repos that the given user has starred
     * 
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public List<Repository> userListStarred(String username, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Repository>> localVarResp = userListStarredWithHttpInfo(username, page, limit);
        return localVarResp.getData();
    }

    /**
     * The repos that the given user has starred
     * 
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Repository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Repository>> userListStarredWithHttpInfo(String username, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = userListStarredValidateBeforeCall(username, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * The repos that the given user has starred (asynchronously)
     * 
     * @param username username of user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userListStarredAsync(String username, Integer page, Integer limit, final ApiCallback<List<Repository>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userListStarredValidateBeforeCall(username, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userListSubscriptions
     * @param username username of the user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userListSubscriptionsCall(String username, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/subscriptions"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userListSubscriptionsValidateBeforeCall(String username, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling userListSubscriptions(Async)");
        }

        return userListSubscriptionsCall(username, page, limit, _callback);

    }

    /**
     * List the repositories watched by a user
     * 
     * @param username username of the user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public List<Repository> userListSubscriptions(String username, Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Repository>> localVarResp = userListSubscriptionsWithHttpInfo(username, page, limit);
        return localVarResp.getData();
    }

    /**
     * List the repositories watched by a user
     * 
     * @param username username of the user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Repository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Repository>> userListSubscriptionsWithHttpInfo(String username, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = userListSubscriptionsValidateBeforeCall(username, page, limit, null);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the repositories watched by a user (asynchronously)
     * 
     * @param username username of the user (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RepositoryList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userListSubscriptionsAsync(String username, Integer page, Integer limit, final ApiCallback<List<Repository>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userListSubscriptionsValidateBeforeCall(username, page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userListTeams
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TeamList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userListTeamsCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/teams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userListTeamsValidateBeforeCall(Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return userListTeamsCall(page, limit, _callback);

    }

    /**
     * List all the teams a user belongs to
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return List&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TeamList </td><td>  -  </td></tr>
     </table>
     */
    public List<Team> userListTeams(Integer page, Integer limit) throws ApiException {
        ApiResponse<List<Team>> localVarResp = userListTeamsWithHttpInfo(page, limit);
        return localVarResp.getData();
    }

    /**
     * List all the teams a user belongs to
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;List&lt;Team&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TeamList </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Team>> userListTeamsWithHttpInfo(Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = userListTeamsValidateBeforeCall(page, limit, null);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all the teams a user belongs to (asynchronously)
     * 
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> TeamList </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userListTeamsAsync(Integer page, Integer limit, final ApiCallback<List<Team>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userListTeamsValidateBeforeCall(page, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userSearch
     * @param q keyword (optional)
     * @param uid ID of the user to search for (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SearchResults of a successful search </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSearchCall(String q, Long uid, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userSearchValidateBeforeCall(String q, Long uid, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        return userSearchCall(q, uid, page, limit, _callback);

    }

    /**
     * Search for users
     * 
     * @param q keyword (optional)
     * @param uid ID of the user to search for (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return UserSearch200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SearchResults of a successful search </td><td>  -  </td></tr>
     </table>
     */
    public UserSearch200Response userSearch(String q, Long uid, Integer page, Integer limit) throws ApiException {
        ApiResponse<UserSearch200Response> localVarResp = userSearchWithHttpInfo(q, uid, page, limit);
        return localVarResp.getData();
    }

    /**
     * Search for users
     * 
     * @param q keyword (optional)
     * @param uid ID of the user to search for (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @return ApiResponse&lt;UserSearch200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SearchResults of a successful search </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserSearch200Response> userSearchWithHttpInfo(String q, Long uid, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = userSearchValidateBeforeCall(q, uid, page, limit, null);
        Type localVarReturnType = new TypeToken<UserSearch200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for users (asynchronously)
     * 
     * @param q keyword (optional)
     * @param uid ID of the user to search for (optional)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SearchResults of a successful search </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSearchAsync(String q, Long uid, Integer page, Integer limit, final ApiCallback<UserSearch200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = userSearchValidateBeforeCall(q, uid, page, limit, _callback);
        Type localVarReturnType = new TypeToken<UserSearch200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userUnblockUser
     * @param username username of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userUnblockUserCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/unblock/{username}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userUnblockUserValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling userUnblockUser(Async)");
        }

        return userUnblockUserCall(username, _callback);

    }

    /**
     * Unblocks a user from the doer.
     * 
     * @param username username of the user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public void userUnblockUser(String username) throws ApiException {
        userUnblockUserWithHttpInfo(username);
    }

    /**
     * Unblocks a user from the doer.
     * 
     * @param username username of the user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userUnblockUserWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = userUnblockUserValidateBeforeCall(username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unblocks a user from the doer. (asynchronously)
     * 
     * @param username username of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> APIEmpty is an empty response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userUnblockUserAsync(String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userUnblockUserValidateBeforeCall(username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userUpdateOAuth2Application
     * @param id application to be updated (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth2Application </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userUpdateOAuth2ApplicationCall(Long id, CreateOAuth2ApplicationOptions body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user/applications/oauth2/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userUpdateOAuth2ApplicationValidateBeforeCall(Long id, CreateOAuth2ApplicationOptions body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userUpdateOAuth2Application(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling userUpdateOAuth2Application(Async)");
        }

        return userUpdateOAuth2ApplicationCall(id, body, _callback);

    }

    /**
     * update an OAuth2 Application, this includes regenerating the client secret
     * 
     * @param id application to be updated (required)
     * @param body  (required)
     * @return OAuth2Application
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth2Application </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public OAuth2Application userUpdateOAuth2Application(Long id, CreateOAuth2ApplicationOptions body) throws ApiException {
        ApiResponse<OAuth2Application> localVarResp = userUpdateOAuth2ApplicationWithHttpInfo(id, body);
        return localVarResp.getData();
    }

    /**
     * update an OAuth2 Application, this includes regenerating the client secret
     * 
     * @param id application to be updated (required)
     * @param body  (required)
     * @return ApiResponse&lt;OAuth2Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth2Application </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuth2Application> userUpdateOAuth2ApplicationWithHttpInfo(Long id, CreateOAuth2ApplicationOptions body) throws ApiException {
        okhttp3.Call localVarCall = userUpdateOAuth2ApplicationValidateBeforeCall(id, body, null);
        Type localVarReturnType = new TypeToken<OAuth2Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * update an OAuth2 Application, this includes regenerating the client secret (asynchronously)
     * 
     * @param id application to be updated (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OAuth2Application </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userUpdateOAuth2ApplicationAsync(Long id, CreateOAuth2ApplicationOptions body, final ApiCallback<OAuth2Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = userUpdateOAuth2ApplicationValidateBeforeCall(id, body, _callback);
        Type localVarReturnType = new TypeToken<OAuth2Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userVerifyGPGKey
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> GPGKey </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call userVerifyGPGKeyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/gpg_key_verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userVerifyGPGKeyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return userVerifyGPGKeyCall(_callback);

    }

    /**
     * Verify a GPG key
     * 
     * @return GPGKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> GPGKey </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public GPGKey userVerifyGPGKey() throws ApiException {
        ApiResponse<GPGKey> localVarResp = userVerifyGPGKeyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Verify a GPG key
     * 
     * @return ApiResponse&lt;GPGKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> GPGKey </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<GPGKey> userVerifyGPGKeyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = userVerifyGPGKeyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GPGKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify a GPG key (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> GPGKey </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> APINotFound is a not found empty response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> APIValidationError is error format response related to input validation </td><td>  * message -  <br>  * url -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call userVerifyGPGKeyAsync(final ApiCallback<GPGKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = userVerifyGPGKeyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GPGKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
