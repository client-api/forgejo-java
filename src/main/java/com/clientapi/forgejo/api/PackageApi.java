/**
 * Forgejo API.
 * This documentation describes the Forgejo API.
 *
 * OpenAPI spec version: 1.20.5+0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.clientapi.forgejo.api;

import com.clientapi.forgejo.invoker.ApiCallback;
import com.clientapi.forgejo.invoker.ApiClient;
import com.clientapi.forgejo.invoker.ApiException;
import com.clientapi.forgejo.invoker.ApiResponse;
import com.clientapi.forgejo.invoker.Configuration;
import com.clientapi.forgejo.invoker.Pair;
import com.clientapi.forgejo.invoker.ProgressRequestBody;
import com.clientapi.forgejo.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.clientapi.forgejo.model.ModelPackage;
import com.clientapi.forgejo.model.PackageFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PackageApi {
    private ApiClient apiClient;

    public PackageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PackageApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for deletePackage */
    private com.squareup.okhttp.Call deletePackageCall(String owner, String type, String name, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling deletePackage(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling deletePackage(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deletePackage(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deletePackage(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/packages/{owner}/{type}/{name}/{version}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
        .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()))
        .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
        .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete a package
     * 
     * @param owner owner of the package (required)
     * @param type type of the package (required)
     * @param name name of the package (required)
     * @param version version of the package (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePackage(String owner, String type, String name, String version) throws ApiException {
        deletePackageWithHttpInfo(owner, type, name, version);
    }

    /**
     * Delete a package
     * 
     * @param owner owner of the package (required)
     * @param type type of the package (required)
     * @param name name of the package (required)
     * @param version version of the package (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePackageWithHttpInfo(String owner, String type, String name, String version) throws ApiException {
        com.squareup.okhttp.Call call = deletePackageCall(owner, type, name, version, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a package (asynchronously)
     * 
     * @param owner owner of the package (required)
     * @param type type of the package (required)
     * @param name name of the package (required)
     * @param version version of the package (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePackageAsync(String owner, String type, String name, String version, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePackageCall(owner, type, name, version, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getPackage */
    private com.squareup.okhttp.Call getPackageCall(String owner, String type, String name, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getPackage(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getPackage(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPackage(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getPackage(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/packages/{owner}/{type}/{name}/{version}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
        .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()))
        .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
        .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets a package
     * 
     * @param owner owner of the package (required)
     * @param type type of the package (required)
     * @param name name of the package (required)
     * @param version version of the package (required)
     * @return ModelPackage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelPackage getPackage(String owner, String type, String name, String version) throws ApiException {
        ApiResponse<ModelPackage> resp = getPackageWithHttpInfo(owner, type, name, version);
        return resp.getData();
    }

    /**
     * Gets a package
     * 
     * @param owner owner of the package (required)
     * @param type type of the package (required)
     * @param name name of the package (required)
     * @param version version of the package (required)
     * @return ApiResponse&lt;ModelPackage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelPackage> getPackageWithHttpInfo(String owner, String type, String name, String version) throws ApiException {
        com.squareup.okhttp.Call call = getPackageCall(owner, type, name, version, null, null);
        Type localVarReturnType = new TypeToken<ModelPackage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a package (asynchronously)
     * 
     * @param owner owner of the package (required)
     * @param type type of the package (required)
     * @param name name of the package (required)
     * @param version version of the package (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPackageAsync(String owner, String type, String name, String version, final ApiCallback<ModelPackage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPackageCall(owner, type, name, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelPackage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listPackageFiles */
    private com.squareup.okhttp.Call listPackageFilesCall(String owner, String type, String name, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling listPackageFiles(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling listPackageFiles(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling listPackageFiles(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling listPackageFiles(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/packages/{owner}/{type}/{name}/{version}/files".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
        .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()))
        .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
        .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets all files of a package
     * 
     * @param owner owner of the package (required)
     * @param type type of the package (required)
     * @param name name of the package (required)
     * @param version version of the package (required)
     * @return List&lt;PackageFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PackageFile> listPackageFiles(String owner, String type, String name, String version) throws ApiException {
        ApiResponse<List<PackageFile>> resp = listPackageFilesWithHttpInfo(owner, type, name, version);
        return resp.getData();
    }

    /**
     * Gets all files of a package
     * 
     * @param owner owner of the package (required)
     * @param type type of the package (required)
     * @param name name of the package (required)
     * @param version version of the package (required)
     * @return ApiResponse&lt;List&lt;PackageFile&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PackageFile>> listPackageFilesWithHttpInfo(String owner, String type, String name, String version) throws ApiException {
        com.squareup.okhttp.Call call = listPackageFilesCall(owner, type, name, version, null, null);
        Type localVarReturnType = new TypeToken<List<PackageFile>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all files of a package (asynchronously)
     * 
     * @param owner owner of the package (required)
     * @param type type of the package (required)
     * @param name name of the package (required)
     * @param version version of the package (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listPackageFilesAsync(String owner, String type, String name, String version, final ApiCallback<List<PackageFile>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listPackageFilesCall(owner, type, name, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PackageFile>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listPackages */
    private com.squareup.okhttp.Call listPackagesCall(String owner, Integer page, Integer limit, String type, String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling listPackages(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/packages/{owner}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "q", q));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "TOTPHeader", "AuthorizationHeaderToken", "SudoHeader", "BasicAuth", "AccessToken", "SudoParam", "Token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets all packages of an owner
     * 
     * @param owner owner of the packages (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param type package type filter (optional)
     * @param q name filter (optional)
     * @return List&lt;ModelPackage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelPackage> listPackages(String owner, Integer page, Integer limit, String type, String q) throws ApiException {
        ApiResponse<List<ModelPackage>> resp = listPackagesWithHttpInfo(owner, page, limit, type, q);
        return resp.getData();
    }

    /**
     * Gets all packages of an owner
     * 
     * @param owner owner of the packages (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param type package type filter (optional)
     * @param q name filter (optional)
     * @return ApiResponse&lt;List&lt;ModelPackage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelPackage>> listPackagesWithHttpInfo(String owner, Integer page, Integer limit, String type, String q) throws ApiException {
        com.squareup.okhttp.Call call = listPackagesCall(owner, page, limit, type, q, null, null);
        Type localVarReturnType = new TypeToken<List<ModelPackage>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all packages of an owner (asynchronously)
     * 
     * @param owner owner of the packages (required)
     * @param page page number of results to return (1-based) (optional)
     * @param limit page size of results (optional)
     * @param type package type filter (optional)
     * @param q name filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listPackagesAsync(String owner, Integer page, Integer limit, String type, String q, final ApiCallback<List<ModelPackage>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listPackagesCall(owner, page, limit, type, q, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelPackage>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
