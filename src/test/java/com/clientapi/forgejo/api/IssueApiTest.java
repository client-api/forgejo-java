/**
 * Forgejo API.
 * This documentation describes the Forgejo API.
 *
 * OpenAPI spec version: 1.20.5+0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.clientapi.forgejo.api;

import com.clientapi.forgejo.invoker.ApiException;
import com.clientapi.forgejo.model.Label;
import com.clientapi.forgejo.model.IssueLabelsOption;
import com.clientapi.forgejo.model.TrackedTime;
import com.clientapi.forgejo.model.AddTimeOption;
import com.clientapi.forgejo.model.WatchInfo;
import com.clientapi.forgejo.model.Comment;
import com.clientapi.forgejo.model.CreateIssueCommentOption;
import com.clientapi.forgejo.model.Issue;
import com.clientapi.forgejo.model.CreateIssueOption;
import com.clientapi.forgejo.model.Attachment;
import java.io.File;
import com.clientapi.forgejo.model.IssueMeta;
import com.clientapi.forgejo.model.CreateLabelOption;
import com.clientapi.forgejo.model.Milestone;
import com.clientapi.forgejo.model.CreateMilestoneOption;
import com.clientapi.forgejo.model.EditReactionOption;
import com.clientapi.forgejo.model.EditIssueCommentOption;
import com.clientapi.forgejo.model.EditIssueOption;
import com.clientapi.forgejo.model.EditAttachmentOptions;
import com.clientapi.forgejo.model.IssueDeadline;
import com.clientapi.forgejo.model.EditDeadlineOption;
import com.clientapi.forgejo.model.EditLabelOption;
import com.clientapi.forgejo.model.EditMilestoneOption;
import com.clientapi.forgejo.model.Reaction;
import org.joda.time.DateTime;
import com.clientapi.forgejo.model.TimelineComment;
import com.clientapi.forgejo.model.User;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IssueApi
 */
public class IssueApiTest {

    private final IssueApi api = new IssueApi();

    
    /**
     * Add a label to an issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueAddLabelTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        IssueLabelsOption body = null;
        // List<Label> response = api.issueAddLabel(owner, repo, index, body);

        // TODO: test validations
    }
    
    /**
     * Subscribe user to issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueAddSubscriptionTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        String user = null;
        // api.issueAddSubscription(owner, repo, index, user);

        // TODO: test validations
    }
    
    /**
     * Add tracked time to a issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueAddTimeTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        AddTimeOption body = null;
        // TrackedTime response = api.issueAddTime(owner, repo, index, body);

        // TODO: test validations
    }
    
    /**
     * Check if user is subscribed to an issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCheckSubscriptionTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        // WatchInfo response = api.issueCheckSubscription(owner, repo, index);

        // TODO: test validations
    }
    
    /**
     * Remove all labels from an issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueClearLabelsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        // api.issueClearLabels(owner, repo, index);

        // TODO: test validations
    }
    
    /**
     * Add a comment to an issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCreateCommentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        CreateIssueCommentOption body = null;
        // Comment response = api.issueCreateComment(owner, repo, index, body);

        // TODO: test validations
    }
    
    /**
     * Create an issue. If using deadline only the date will be taken into account, and time of day ignored.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCreateIssueTest() throws ApiException {
        String owner = null;
        String repo = null;
        CreateIssueOption body = null;
        // Issue response = api.issueCreateIssue(owner, repo, body);

        // TODO: test validations
    }
    
    /**
     * Create an issue attachment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCreateIssueAttachmentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        File attachment = null;
        String name = null;
        // Attachment response = api.issueCreateIssueAttachment(owner, repo, index, attachment, name);

        // TODO: test validations
    }
    
    /**
     * Block the issue given in the body by the issue in path
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCreateIssueBlockingTest() throws ApiException {
        String owner = null;
        String repo = null;
        String index = null;
        IssueMeta body = null;
        // Issue response = api.issueCreateIssueBlocking(owner, repo, index, body);

        // TODO: test validations
    }
    
    /**
     * Create a comment attachment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCreateIssueCommentAttachmentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        File attachment = null;
        String name = null;
        // Attachment response = api.issueCreateIssueCommentAttachment(owner, repo, id, attachment, name);

        // TODO: test validations
    }
    
    /**
     * Make the issue in the url depend on the issue in the form.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCreateIssueDependenciesTest() throws ApiException {
        String owner = null;
        String repo = null;
        String index = null;
        IssueMeta body = null;
        // Issue response = api.issueCreateIssueDependencies(owner, repo, index, body);

        // TODO: test validations
    }
    
    /**
     * Create a label
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCreateLabelTest() throws ApiException {
        String owner = null;
        String repo = null;
        CreateLabelOption body = null;
        // Label response = api.issueCreateLabel(owner, repo, body);

        // TODO: test validations
    }
    
    /**
     * Create a milestone
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueCreateMilestoneTest() throws ApiException {
        String owner = null;
        String repo = null;
        CreateMilestoneOption body = null;
        // Milestone response = api.issueCreateMilestone(owner, repo, body);

        // TODO: test validations
    }
    
    /**
     * Delete an issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueDeleteTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        // api.issueDelete(owner, repo, index);

        // TODO: test validations
    }
    
    /**
     * Delete a comment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueDeleteCommentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        // api.issueDeleteComment(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * Delete a comment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueDeleteCommentDeprecatedTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer index = null;
        Long id = null;
        // api.issueDeleteCommentDeprecated(owner, repo, index, id);

        // TODO: test validations
    }
    
    /**
     * Remove a reaction from a comment of an issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueDeleteCommentReactionTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        EditReactionOption content = null;
        // api.issueDeleteCommentReaction(owner, repo, id, content);

        // TODO: test validations
    }
    
    /**
     * Delete an issue attachment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueDeleteIssueAttachmentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        Long attachmentId = null;
        // api.issueDeleteIssueAttachment(owner, repo, index, attachmentId);

        // TODO: test validations
    }
    
    /**
     * Delete a comment attachment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueDeleteIssueCommentAttachmentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        Long attachmentId = null;
        // api.issueDeleteIssueCommentAttachment(owner, repo, id, attachmentId);

        // TODO: test validations
    }
    
    /**
     * Remove a reaction from an issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueDeleteIssueReactionTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        EditReactionOption content = null;
        // api.issueDeleteIssueReaction(owner, repo, index, content);

        // TODO: test validations
    }
    
    /**
     * Delete a label
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueDeleteLabelTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        // api.issueDeleteLabel(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * Delete a milestone
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueDeleteMilestoneTest() throws ApiException {
        String owner = null;
        String repo = null;
        String id = null;
        // api.issueDeleteMilestone(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * Delete an issue&#39;s existing stopwatch.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueDeleteStopWatchTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        // api.issueDeleteStopWatch(owner, repo, index);

        // TODO: test validations
    }
    
    /**
     * Unsubscribe user from issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueDeleteSubscriptionTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        String user = null;
        // api.issueDeleteSubscription(owner, repo, index, user);

        // TODO: test validations
    }
    
    /**
     * Delete specific tracked time
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueDeleteTimeTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        Long id = null;
        // api.issueDeleteTime(owner, repo, index, id);

        // TODO: test validations
    }
    
    /**
     * Edit a comment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueEditCommentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        EditIssueCommentOption body = null;
        // Comment response = api.issueEditComment(owner, repo, id, body);

        // TODO: test validations
    }
    
    /**
     * Edit a comment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueEditCommentDeprecatedTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer index = null;
        Long id = null;
        EditIssueCommentOption body = null;
        // Comment response = api.issueEditCommentDeprecated(owner, repo, index, id, body);

        // TODO: test validations
    }
    
    /**
     * Edit an issue. If using deadline only the date will be taken into account, and time of day ignored.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueEditIssueTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        EditIssueOption body = null;
        // Issue response = api.issueEditIssue(owner, repo, index, body);

        // TODO: test validations
    }
    
    /**
     * Edit an issue attachment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueEditIssueAttachmentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        Long attachmentId = null;
        EditAttachmentOptions body = null;
        // Attachment response = api.issueEditIssueAttachment(owner, repo, index, attachmentId, body);

        // TODO: test validations
    }
    
    /**
     * Edit a comment attachment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueEditIssueCommentAttachmentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        Long attachmentId = null;
        EditAttachmentOptions body = null;
        // Attachment response = api.issueEditIssueCommentAttachment(owner, repo, id, attachmentId, body);

        // TODO: test validations
    }
    
    /**
     * Set an issue deadline. If set to null, the deadline is deleted. If using deadline only the date will be taken into account, and time of day ignored.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueEditIssueDeadlineTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        EditDeadlineOption body = null;
        // IssueDeadline response = api.issueEditIssueDeadline(owner, repo, index, body);

        // TODO: test validations
    }
    
    /**
     * Update a label
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueEditLabelTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        EditLabelOption body = null;
        // Label response = api.issueEditLabel(owner, repo, id, body);

        // TODO: test validations
    }
    
    /**
     * Update a milestone
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueEditMilestoneTest() throws ApiException {
        String owner = null;
        String repo = null;
        String id = null;
        EditMilestoneOption body = null;
        // Milestone response = api.issueEditMilestone(owner, repo, id, body);

        // TODO: test validations
    }
    
    /**
     * Get a comment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueGetCommentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        // Comment response = api.issueGetComment(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * Get a list of reactions from a comment of an issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueGetCommentReactionsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        // List<Reaction> response = api.issueGetCommentReactions(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * List all comments on an issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueGetCommentsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        DateTime since = null;
        DateTime before = null;
        // List<Comment> response = api.issueGetComments(owner, repo, index, since, before);

        // TODO: test validations
    }
    
    /**
     * List all comments and events on an issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueGetCommentsAndTimelineTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        DateTime since = null;
        Integer page = null;
        Integer limit = null;
        DateTime before = null;
        // List<TimelineComment> response = api.issueGetCommentsAndTimeline(owner, repo, index, since, page, limit, before);

        // TODO: test validations
    }
    
    /**
     * Get an issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueGetIssueTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        // Issue response = api.issueGetIssue(owner, repo, index);

        // TODO: test validations
    }
    
    /**
     * Get an issue attachment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueGetIssueAttachmentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        Long attachmentId = null;
        // Attachment response = api.issueGetIssueAttachment(owner, repo, index, attachmentId);

        // TODO: test validations
    }
    
    /**
     * Get a comment attachment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueGetIssueCommentAttachmentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        Long attachmentId = null;
        // Attachment response = api.issueGetIssueCommentAttachment(owner, repo, id, attachmentId);

        // TODO: test validations
    }
    
    /**
     * Get a list reactions of an issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueGetIssueReactionsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        Integer page = null;
        Integer limit = null;
        // List<Reaction> response = api.issueGetIssueReactions(owner, repo, index, page, limit);

        // TODO: test validations
    }
    
    /**
     * Get a single label
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueGetLabelTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        // Label response = api.issueGetLabel(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * Get an issue&#39;s labels
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueGetLabelsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        // List<Label> response = api.issueGetLabels(owner, repo, index);

        // TODO: test validations
    }
    
    /**
     * Get a milestone
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueGetMilestoneTest() throws ApiException {
        String owner = null;
        String repo = null;
        String id = null;
        // Milestone response = api.issueGetMilestone(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * Get all of a repository&#39;s opened milestones
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueGetMilestonesListTest() throws ApiException {
        String owner = null;
        String repo = null;
        String state = null;
        String name = null;
        Integer page = null;
        Integer limit = null;
        // List<Milestone> response = api.issueGetMilestonesList(owner, repo, state, name, page, limit);

        // TODO: test validations
    }
    
    /**
     * List all comments in a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueGetRepoCommentsTest() throws ApiException {
        String owner = null;
        String repo = null;
        DateTime since = null;
        DateTime before = null;
        Integer page = null;
        Integer limit = null;
        // List<Comment> response = api.issueGetRepoComments(owner, repo, since, before, page, limit);

        // TODO: test validations
    }
    
    /**
     * List issues that are blocked by this issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueListBlocksTest() throws ApiException {
        String owner = null;
        String repo = null;
        String index = null;
        Integer page = null;
        Integer limit = null;
        // List<Issue> response = api.issueListBlocks(owner, repo, index, page, limit);

        // TODO: test validations
    }
    
    /**
     * List issue&#39;s attachments
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueListIssueAttachmentsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        // List<Attachment> response = api.issueListIssueAttachments(owner, repo, index);

        // TODO: test validations
    }
    
    /**
     * List comment&#39;s attachments
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueListIssueCommentAttachmentsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        // List<Attachment> response = api.issueListIssueCommentAttachments(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * List an issue&#39;s dependencies, i.e all issues that block this issue.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueListIssueDependenciesTest() throws ApiException {
        String owner = null;
        String repo = null;
        String index = null;
        Integer page = null;
        Integer limit = null;
        // List<Issue> response = api.issueListIssueDependencies(owner, repo, index, page, limit);

        // TODO: test validations
    }
    
    /**
     * List a repository&#39;s issues
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueListIssuesTest() throws ApiException {
        String owner = null;
        String repo = null;
        String state = null;
        String labels = null;
        String q = null;
        String type = null;
        String milestones = null;
        DateTime since = null;
        DateTime before = null;
        String createdBy = null;
        String assignedBy = null;
        String mentionedBy = null;
        Integer page = null;
        Integer limit = null;
        // List<Issue> response = api.issueListIssues(owner, repo, state, labels, q, type, milestones, since, before, createdBy, assignedBy, mentionedBy, page, limit);

        // TODO: test validations
    }
    
    /**
     * Get all of a repository&#39;s labels
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueListLabelsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer page = null;
        Integer limit = null;
        // List<Label> response = api.issueListLabels(owner, repo, page, limit);

        // TODO: test validations
    }
    
    /**
     * Add a reaction to a comment of an issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issuePostCommentReactionTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        EditReactionOption content = null;
        // Reaction response = api.issuePostCommentReaction(owner, repo, id, content);

        // TODO: test validations
    }
    
    /**
     * Add a reaction to an issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issuePostIssueReactionTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        EditReactionOption content = null;
        // Reaction response = api.issuePostIssueReaction(owner, repo, index, content);

        // TODO: test validations
    }
    
    /**
     * Unblock the issue given in the body by the issue in path
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueRemoveIssueBlockingTest() throws ApiException {
        String owner = null;
        String repo = null;
        String index = null;
        IssueMeta body = null;
        // Issue response = api.issueRemoveIssueBlocking(owner, repo, index, body);

        // TODO: test validations
    }
    
    /**
     * Remove an issue dependency
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueRemoveIssueDependenciesTest() throws ApiException {
        String owner = null;
        String repo = null;
        String index = null;
        IssueMeta body = null;
        // Issue response = api.issueRemoveIssueDependencies(owner, repo, index, body);

        // TODO: test validations
    }
    
    /**
     * Remove a label from an issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueRemoveLabelTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        Long id = null;
        // api.issueRemoveLabel(owner, repo, index, id);

        // TODO: test validations
    }
    
    /**
     * Replace an issue&#39;s labels
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueReplaceLabelsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        IssueLabelsOption body = null;
        // List<Label> response = api.issueReplaceLabels(owner, repo, index, body);

        // TODO: test validations
    }
    
    /**
     * Reset a tracked time of an issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueResetTimeTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        // api.issueResetTime(owner, repo, index);

        // TODO: test validations
    }
    
    /**
     * Search for issues across the repositories that the user has access to
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueSearchIssuesTest() throws ApiException {
        String state = null;
        String labels = null;
        String milestones = null;
        String q = null;
        Long priorityRepoId = null;
        String type = null;
        DateTime since = null;
        DateTime before = null;
        Boolean assigned = null;
        Boolean created = null;
        Boolean mentioned = null;
        Boolean reviewRequested = null;
        Boolean reviewed = null;
        String owner = null;
        String team = null;
        Integer page = null;
        Integer limit = null;
        // List<Issue> response = api.issueSearchIssues(state, labels, milestones, q, priorityRepoId, type, since, before, assigned, created, mentioned, reviewRequested, reviewed, owner, team, page, limit);

        // TODO: test validations
    }
    
    /**
     * Start stopwatch on an issue.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueStartStopWatchTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        // api.issueStartStopWatch(owner, repo, index);

        // TODO: test validations
    }
    
    /**
     * Stop an issue&#39;s existing stopwatch.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueStopStopWatchTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        // api.issueStopStopWatch(owner, repo, index);

        // TODO: test validations
    }
    
    /**
     * Get users who subscribed on an issue.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueSubscriptionsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        Integer page = null;
        Integer limit = null;
        // List<User> response = api.issueSubscriptions(owner, repo, index, page, limit);

        // TODO: test validations
    }
    
    /**
     * List an issue&#39;s tracked times
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueTrackedTimesTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        String user = null;
        DateTime since = null;
        DateTime before = null;
        Integer page = null;
        Integer limit = null;
        // List<TrackedTime> response = api.issueTrackedTimes(owner, repo, index, user, since, before, page, limit);

        // TODO: test validations
    }
    
    /**
     * Moves the Pin to the given Position
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveIssuePinTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        Long position = null;
        // api.moveIssuePin(owner, repo, index, position);

        // TODO: test validations
    }
    
    /**
     * Pin an Issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pinIssueTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        // api.pinIssue(owner, repo, index);

        // TODO: test validations
    }
    
    /**
     * Unpin an Issue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unpinIssueTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        // api.unpinIssue(owner, repo, index);

        // TODO: test validations
    }
    
}
